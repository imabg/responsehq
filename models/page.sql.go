// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: page.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPage = `-- name: CreatePage :one
INSERT INTO pages (id, url, support_url, logo_url, timezone, send_notification, history_shows, company_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, url, is_active, support_url, logo_url, timezone, history_shows, send_notification, company_id, subscription_id, created_at, updated_at
`

type CreatePageParams struct {
	ID               string      `json:"id"`
	Url              string      `json:"url"`
	SupportUrl       pgtype.Text `json:"supportUrl"`
	LogoUrl          pgtype.Text `json:"logoUrl"`
	Timezone         pgtype.Text `json:"timezone"`
	SendNotification bool        `json:"sendNotification"`
	HistoryShows     History     `json:"historyShows"`
	CompanyID        string      `json:"companyId"`
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (Page, error) {
	row := q.db.QueryRow(ctx, createPage,
		arg.ID,
		arg.Url,
		arg.SupportUrl,
		arg.LogoUrl,
		arg.Timezone,
		arg.SendNotification,
		arg.HistoryShows,
		arg.CompanyID,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.IsActive,
		&i.SupportUrl,
		&i.LogoUrl,
		&i.Timezone,
		&i.HistoryShows,
		&i.SendNotification,
		&i.CompanyID,
		&i.SubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllDetails = `-- name: GetAllDetails :one
SELECT pages.id, url, pages.is_active, support_url, logo_url, timezone, history_shows, send_notification, company_id, pages.subscription_id, pages.created_at, pages.updated_at, companies.id, name, created_by, companies.is_active, companies.subscription_id, companies.created_at, companies.updated_at, subscriptions.id, subscriptions.is_active, plan, subscriptions.created_at, subscriptions.updated_at
FROM pages
         INNER JOIN companies ON companies.id = pages.company_id
         INNER JOIN subscriptions ON subscriptions.id = companies.subscription_id
WHERE pages.id = $1
LIMIT 1
`

type GetAllDetailsRow struct {
	ID               string           `json:"id"`
	Url              string           `json:"url"`
	IsActive         pgtype.Bool      `json:"isActive"`
	SupportUrl       pgtype.Text      `json:"supportUrl"`
	LogoUrl          pgtype.Text      `json:"logoUrl"`
	Timezone         pgtype.Text      `json:"timezone"`
	HistoryShows     History          `json:"historyShows"`
	SendNotification bool             `json:"sendNotification"`
	CompanyID        string           `json:"companyId"`
	SubscriptionID   int32            `json:"subscriptionId"`
	CreatedAt        pgtype.Timestamp `json:"createdAt"`
	UpdatedAt        pgtype.Timestamp `json:"updatedAt"`
	ID_2             string           `json:"id2"`
	Name             string           `json:"name"`
	CreatedBy        string           `json:"createdBy"`
	IsActive_2       pgtype.Bool      `json:"isActive2"`
	SubscriptionID_2 int32            `json:"subscriptionId2"`
	CreatedAt_2      pgtype.Timestamp `json:"createdAt2"`
	UpdatedAt_2      pgtype.Timestamp `json:"updatedAt2"`
	ID_3             int64            `json:"id3"`
	IsActive_3       pgtype.Bool      `json:"isActive3"`
	Plan             Plans            `json:"plan"`
	CreatedAt_3      pgtype.Timestamp `json:"createdAt3"`
	UpdatedAt_3      pgtype.Timestamp `json:"updatedAt3"`
}

func (q *Queries) GetAllDetails(ctx context.Context, id string) (GetAllDetailsRow, error) {
	row := q.db.QueryRow(ctx, getAllDetails, id)
	var i GetAllDetailsRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.IsActive,
		&i.SupportUrl,
		&i.LogoUrl,
		&i.Timezone,
		&i.HistoryShows,
		&i.SendNotification,
		&i.CompanyID,
		&i.SubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Name,
		&i.CreatedBy,
		&i.IsActive_2,
		&i.SubscriptionID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.ID_3,
		&i.IsActive_3,
		&i.Plan,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
	)
	return i, err
}

const getDetailAgainstId = `-- name: GetDetailAgainstId :one
SELECT id, url, is_active, support_url, logo_url, timezone, history_shows, send_notification, company_id, subscription_id, created_at, updated_at
FROM pages
WHERE id = $1
`

func (q *Queries) GetDetailAgainstId(ctx context.Context, id string) (Page, error) {
	row := q.db.QueryRow(ctx, getDetailAgainstId, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.IsActive,
		&i.SupportUrl,
		&i.LogoUrl,
		&i.Timezone,
		&i.HistoryShows,
		&i.SendNotification,
		&i.CompanyID,
		&i.SubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :exec
UPDATE pages
set url=$1,
    support_url=$2,
    logo_url=$3,
    timezone=$4,
    history_shows=$5
WHERE id = $6
`

type UpdateParams struct {
	Url          string      `json:"url"`
	SupportUrl   pgtype.Text `json:"supportUrl"`
	LogoUrl      pgtype.Text `json:"logoUrl"`
	Timezone     pgtype.Text `json:"timezone"`
	HistoryShows History     `json:"historyShows"`
	ID           string      `json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.Url,
		arg.SupportUrl,
		arg.LogoUrl,
		arg.Timezone,
		arg.HistoryShows,
		arg.ID,
	)
	return err
}

const updateNotificationStatus = `-- name: UpdateNotificationStatus :exec
UPDATE pages SET send_notification=$1 WHERE id=$2
`

type UpdateNotificationStatusParams struct {
	SendNotification bool   `json:"sendNotification"`
	ID               string `json:"id"`
}

func (q *Queries) UpdateNotificationStatus(ctx context.Context, arg UpdateNotificationStatusParams) error {
	_, err := q.db.Exec(ctx, updateNotificationStatus, arg.SendNotification, arg.ID)
	return err
}
