// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: incident.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIncident = `-- name: CreateIncident :one
INSERT INTO incidents(id, name, is_backfilled, body, page_id, company_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, is_backfilled, body, is_active, page_id, company_id, created_at, updated_at
`

type CreateIncidentParams struct {
	ID           string           `json:"id"`
	Name         string           `json:"name"`
	IsBackfilled pgtype.Bool      `json:"isBackfilled"`
	Body         pgtype.Text      `json:"body"`
	PageID       string           `json:"pageId"`
	CompanyID    string           `json:"companyId"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
	UpdatedAt    pgtype.Timestamp `json:"updatedAt"`
}

func (q *Queries) CreateIncident(ctx context.Context, arg CreateIncidentParams) (Incident, error) {
	row := q.db.QueryRow(ctx, createIncident,
		arg.ID,
		arg.Name,
		arg.IsBackfilled,
		arg.Body,
		arg.PageID,
		arg.CompanyID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsBackfilled,
		&i.Body,
		&i.IsActive,
		&i.PageID,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIncidentById = `-- name: DeleteIncidentById :exec
DELETE FROM incidents WHERE id=$1
`

func (q *Queries) DeleteIncidentById(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteIncidentById, id)
	return err
}

const getAllIncidentsAgainstPage = `-- name: GetAllIncidentsAgainstPage :many
SELECT id, name, is_backfilled, body, is_active, page_id, company_id, created_at, updated_at FROM incidents WHERE page_id=$1 AND is_active = TRUE
`

func (q *Queries) GetAllIncidentsAgainstPage(ctx context.Context, pageID string) ([]Incident, error) {
	rows, err := q.db.Query(ctx, getAllIncidentsAgainstPage, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Incident
	for rows.Next() {
		var i Incident
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsBackfilled,
			&i.Body,
			&i.IsActive,
			&i.PageID,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIncidentById = `-- name: GetIncidentById :one
SELECT id, name, is_backfilled, body, is_active, page_id, company_id, created_at, updated_at FROM incidents WHERE id=$1
`

func (q *Queries) GetIncidentById(ctx context.Context, id string) (Incident, error) {
	row := q.db.QueryRow(ctx, getIncidentById, id)
	var i Incident
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsBackfilled,
		&i.Body,
		&i.IsActive,
		&i.PageID,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIncidentById = `-- name: UpdateIncidentById :exec
UPDATE incidents SET name=$1,body=$2,updated_at=$3
WHERE id=$4
`

type UpdateIncidentByIdParams struct {
	Name      string           `json:"name"`
	Body      pgtype.Text      `json:"body"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
	ID        string           `json:"id"`
}

func (q *Queries) UpdateIncidentById(ctx context.Context, arg UpdateIncidentByIdParams) error {
	_, err := q.db.Exec(ctx, updateIncidentById,
		arg.Name,
		arg.Body,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
