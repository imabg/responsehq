// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subscription.sql

package models

import (
	"context"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (plan) VALUES ($1) RETURNING id, is_active, plan, created_at, updated_at
`

func (q *Queries) CreateSubscription(ctx context.Context, plan Plans) (Subscription, error) {
	row := q.db.QueryRow(ctx, createSubscription, plan)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Plan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscriptionById = `-- name: GetSubscriptionById :one
SELECT id, is_active, plan, created_at, updated_at FROM subscriptions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionById(ctx context.Context, id int64) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscriptionById, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Plan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllSubscriptions = `-- name: ListAllSubscriptions :many
SELECT id, is_active, plan, created_at, updated_at FROM subscriptions
WHERE is_active=true
ORDER BY created_at
`

func (q *Queries) ListAllSubscriptions(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.Query(ctx, listAllSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.IsActive,
			&i.Plan,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSubscriptionInactive = `-- name: MarkSubscriptionInactive :one
UPDATE subscriptions set is_active = false WHERE id = $1 RETURNING id, is_active, plan, created_at, updated_at
`

func (q *Queries) MarkSubscriptionInactive(ctx context.Context, id int64) (Subscription, error) {
	row := q.db.QueryRow(ctx, markSubscriptionInactive, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.Plan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSubscriptionById = `-- name: UpdateSubscriptionById :exec
UPDATE subscriptions set plan = $1 WHERE id = $2
`

type UpdateSubscriptionByIdParams struct {
	Plan Plans `json:"plan"`
	ID   int64 `json:"id"`
}

func (q *Queries) UpdateSubscriptionById(ctx context.Context, arg UpdateSubscriptionByIdParams) error {
	_, err := q.db.Exec(ctx, updateSubscriptionById, arg.Plan, arg.ID)
	return err
}
